/**
 * @author bubao
 * @description
 * @date: 2018-01-23
 * @Last Modified by: bubao
 * @Last Modified time: 2018-10-13 12:23:32
 */

const fs = require('fs');
const ebook = require('./ebook.js');
const times = require('lodash/times');
const compact = require('lodash/compact');
const TurndownService = require('turndown');
const { console } = require('../../tools/commonModules');
const filenamify = require("filenamify");

const imgsrc = '![](https://pic1.zhimg.com/';
const Turndown = new TurndownService();

Turndown.addRule('indentedCodeBlock', {
    filter(node, options) {
        return (
            options.codeBlockStyle === 'indented' &&
            node.nodeName === 'PRE' &&
            node.firstChild &&
            node.firstChild.nodeName === 'CODE'
        );
    },
    replacement(content, node) {
        return `'\n\`\`\`${node.firstChild.getAttribute('class')}\n${content}\n\`\`\`\n`;
    }
});

/**
 * ËΩ¨Êç¢ÂÜÖÂÆπÔºåÂ∞ÜÈÉ®ÂàÜ‰∏çÈÄÇÂêàËΩ¨Êç¢ÁöÑÊ†áÁ≠æÊîπ‰∏∫ÂêàÈÄÇËΩ¨Êç¢ÁöÑÊ†áÁ≠æ
 * @param {string} content Áü•‰πé‰∏ìÊ†èÁöÑMarkdownÂÜÖÂÆπ
 */
const replaceContent = (content) => {
    return content.replace(/<br>/g, '\n').replace(/<code lang="/g, '<pre><code class="language-').replace(/\n<\/code>/g, '\n</code></pre>');
}

/**
 * ËΩ¨Êç¢ÂÜÖÂÆπÔºåËøûÊé•ËΩ¨Êç¢‰∏∫ÁªùÂØπËøûÊé•
 * @param {string} content Áü•‰πé‰∏ìÊ†èÁöÑMarkdownÂÜÖÂÆπ
 */
const replaceImage = (content) => {
    const reg = /<noscript>.*?<\/noscript>/g;
    const reg2 = /src="(.*?)"/;
    let src = content.match(reg);
    const imageList = [];
    src = compact(src); // ‰ΩøÁî®lodash ÔºåÂç≥‰æøÊòØsrc‰∏∫null‰πüËÉΩÂ§üËΩ¨‰∏∫Á©∫ÁöÑÊï∞ÁªÑ
    times(src.length, (imageNum) => {
        imageList.push(`\n\n![](${src[imageNum].match(reg2)[1]})\n\n`);
    });
    times(src.length, (imageNum) => {
        content = content.replace(src[imageNum], imageList[imageNum]);
    });
    return content.replace(/!\[\]\(/g, imgsrc);
}

/**
 * ËΩ¨Êç¢Ê†áÈ¢òÔºåÂõ†‰∏∫windowsÁâπÊÆäÂ≠óÁ¨¶‰∏çËÉΩÂÅöÊñá‰ª∂Âêç
 * @param {string} title Ê†áÈ¢ò
 */
const replaceTitle = (title) => {
    const pattern = new RegExp("[`~!@#$^&'*()=|{}':;',\\[\\]<>/?~ÔºÅ@#Ôø•‚Ä¶‚Ä¶&*ÔºàÔºâ&mdash;‚Äî|{}„Äê„Äë‚ÄòÔºõÔºö‚Äù‚Äú'„ÄÇÔºå„ÄÅÔºü]");
    let rs = '';

    times(title.length, (k) => {
        const rs2 = title.substr(k, 1).replace(/"/, ''); // ‰ΩøÁî®Ê≠£ÂàôË°®ËææÂºèÂçïÁã¨ÂéªÈô§ÂèåÂºïÂè∑
        rs += rs2.replace(pattern, '');
    });
    return Buffer.from(rs);
}

/**
 * ËΩ¨Êç¢Êó∂Èó¥
 * @param {string} time Êó∂Èó¥
 */
const replaceTime = (time) => {
    return time.replace("T", ",").replace("+08:00", "");
}

/**
 * Áü•‰πé‰∏ìÊ†èHTML2MD
 * markdown(path, postId, res[, format])
 * @param {string} path ‰∏ãËΩΩÂú∞ÂùÄ
 * @param {string} postId Áü•‰πé‰∏ìÊ†èID
 * @param {string} zhihuJson Áü•‰πé‰∏ìÊ†èÁöÑÂÜÖÂÆπ
 * @param {string} format ÊåáÂÆö‰∏∫ebookÔºåÊàñËÄÖÁïôÁ©∫ÔºåËøòÊú™ÂÆåÂñÑ
 */
const markdown = (path, postId, zhihuJson, format) => {
    times(Object.getOwnPropertyNames(zhihuJson).length, (i) => {
        zhihuJson[i].content = replaceContent(zhihuJson[i].content);
        let content = Turndown.turndown(zhihuJson[i].content);
        content = replaceImage(content);
        let { title } = zhihuJson[i];
        // title = replaceTitle(title);
        const filename = filenamify(titlt);
        const time = `${zhihuJson[i].publishedTime}`;
        const T = replaceTime(time);
        const Ti = T.split(',')[0];

        const postUrl = zhihuJson[i].url;
        const copyRight = `\n\nÁü•‰πéÂéüÊñá: [${title}](https://zhuanlan.zhihu.com${postUrl})\n\n\n`;
        const header = `# ${title}\n\ndate: ${T.replace(",", " ")} \n\n\n`;

        if (!fs.existsSync(`${path}/${postId}`)) {
            fs.mkdirSync(`${path}/${postId}`);
        }
        // Â¶ÇÊûúÊ≤°ÊúâÊåáÂÆöÁõÆÂΩïÔºåÂàõÂª∫‰πã
        fs.writeFileSync(`${path}/${postId}/${Ti};${filename}.md`, header, 'utf8', (err) => {
            if (err) throw err;
            console.log(`‚ùå ${Ti};${filename}.md`);
        });

        fs.appendFile(`${path}/${postId}/${Ti};${filename}.md`, content + copyRight, 'utf8', (err) => {
            if (err) throw err;
            console.log(`üçÖ  ${Ti};${filename}.md`);
            if (i === zhihuJson.length - 1 && format === "ebook") {
                const ebookObj = (fs.readFileSync(`${path}/${postId}/0.json`))[0];
                ebook(path, postId, {
                    title: postId,
                    author: ebookObj.author.name,
                    content: []
                });
            }
        });
    });
};

module.exports = markdown;
